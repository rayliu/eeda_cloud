package controllers;import interceptor.EedaInterceptor;import java.text.SimpleDateFormat;import java.util.Date;import java.util.Enumeration;import java.util.HashMap;import java.util.Map;import models.ParentOfficeModel;import models.UserLogin;import models.eeda.profile.OfficeConfig;import org.apache.commons.lang.StringUtils;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.AuthenticationException;import org.apache.shiro.authc.IncorrectCredentialsException;import org.apache.shiro.authc.LockedAccountException;import org.apache.shiro.authc.UnknownAccountException;import org.apache.shiro.authc.UsernamePasswordToken;import org.apache.shiro.subject.Subject;import com.google.gson.Gson;import com.jfinal.aop.Before;import com.jfinal.core.Controller;import com.jfinal.ext.plugin.shiro.ShiroKit;import com.jfinal.log.Logger;import com.jfinal.plugin.activerecord.Db;import com.jfinal.plugin.activerecord.Record;import com.jfinal.plugin.activerecord.tx.Tx;import controllers.eeda.util.EedaCommonHandler;import controllers.eeda.util.ParentOffice;import controllers.eeda.util.getCurrentPermission;@Before(EedaInterceptor.class)public class HomeController extends Controller {	private Logger logger = Logger.getLogger(HomeController.class);    // in config route已经将路径默认设置为/yh    // me.add("/yh", controllers.yh.AppController.class, "/yh");    Subject currentUser = SecurityUtils.getSubject();    private boolean isAuthenticated() {        // remember me 处理，自动帮user 登陆        if (!currentUser.isAuthenticated() && currentUser.isRemembered()) {            Object principal = currentUser.getPrincipal();            if (null != principal) {                UserLogin user = UserLogin.getUserByName(String.valueOf(principal));                if(user==null){//这里是预防user使用了remember me, 但是user ID在表中已删除                	redirect("/login");                	return false;                }                String password = user.getStr("password");                UsernamePasswordToken token = new UsernamePasswordToken(user.getStr("user_name"), password);                token.setRememberMe(true);                currentUser.login(token);// 登录            }        }        if (!currentUser.isAuthenticated()) {            redirect("/login");            return false;        }        setAttr("userId", currentUser.getPrincipal());        // timeout:-1000ms 这样设置才能永不超时     	currentUser.getSession().setTimeout(-1000L);    	        return true;    }    public void index() {    	setSysTitle();        if (isAuthenticated()) {            UserLogin user = UserLogin.getUserByName(String.valueOf(currentUser.getPrincipal()));        	            if(user.get("c_name")!=null&&!"".equals(user.get("c_name"))){            	setAttr("userId", user.get("c_name"));            }else{            	setAttr("userId", currentUser.getPrincipal());            }                        setAttr("user_login_id", currentUser.getPrincipal());            setAttr("login_time",user.get("last_login"));            setAttr("lastIndex",user.get("last_index") == null ? "pastOneDay" : user.get("last_index"));            //            loadMenu(this);                        //更新当前用户最后一次登陆的时间            updateLastLogin(user);                        //查询当前用户权限，并且将其设置到会话当中            setPermissionToSession();                       String savedRequestUrl = this.getSessionAttr(ShiroKit.getSavedRequestKey());            if(savedRequestUrl!=null){            	setSessionAttr(ShiroKit.getSavedRequestKey(), null);            	redirect(savedRequestUrl);            }else{            	String officeConfig="select oc.index_page_path from eeda_office_config oc "            			+ " where oc.office_id =?";            	Record rec = Db.findFirst(officeConfig, user.getLong("office_id"));            	if(rec == null || rec.getStr("index_page_path") == null){            		render("/index.html");            	}else{            		render(rec.getStr("index_page_path"));            	}            }        }    }	private void setPermissionToSession() {		ParentOfficeModel pom = ParentOffice.getInstance().getOfficeId(this);		getCurrentPermission getPermission = getCurrentPermission.getInstance();		Map<String,String> map = getPermission.currentHasPermission(currentUser,pom);		setSessionAttr("permissionMap", map);		setAttr("permissionMap", map);	}	private void updateLastLogin(UserLogin user) {		Date now = new Date(); 		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");//可以方便地修改日期格式		String currentTime = dateFormat.format( now );		user.set("last_login", currentTime);		user.update();	}    public void login() {//    	if (isAuthenticated()) {//    		redirect("/");//    	}        String username = getPara("username");                setSysTitle();                if (username == null) {            render("/eeda/login.html");            return;        }        UsernamePasswordToken token = new UsernamePasswordToken(getPara("username"), getPara("password"));        if (getPara("remember") != null && "Y".equals(getPara("remember")))            token.setRememberMe(true);        String errMsg = "";        try {            currentUser.login(token);            if (getPara("remember") != null && "Y".equals(getPara("remember"))){                // timeout:-1000ms 这样设置才能永不超时             	currentUser.getSession().setTimeout(-1000L);            }        } catch (UnknownAccountException uae) {            //errMsg = "用户名不存在";            errMsg = "用户名/密码不正确";            uae.printStackTrace();        } catch (IncorrectCredentialsException ice) {            //errMsg = "密码不正确";            errMsg = "用户名/密码不正确";            ice.printStackTrace();        } catch (LockedAccountException lae) {            errMsg = "用户名已被停用";            lae.printStackTrace();        } catch (AuthenticationException ae) {            errMsg = "用户名/密码不正确";            ae.printStackTrace();        }        if (errMsg.length()==0) {        	        	UserLogin user = UserLogin.getCurrentUser();	        	        	if(user==null){            	errMsg = "用户名不存在或已被停用";            	setAttr("errMsg", errMsg);            	render("/eeda/login.html");            }else if(user.get("c_name") != null && !"".equals(user.get("c_name"))){            	setAttr("userId", user.get("c_name"));            	/*setAttr("login_time",user.get("last_login"));*/            	redirect("/");            	//render("/yh/index.html");            }else{            	setAttr("userId",currentUser.getPrincipal());            	/*setAttr("login_time",user.get("last_login"));*/            	redirect("/");            	//render("/yh/index.html");            };                              } else {            setAttr("errMsg", errMsg);            render("/eeda/login.html");        }    }	private void setSysTitle() {		String serverName = getRequest().getServerName();        String basePath = getRequest().getScheme()+"://"+getRequest().getServerName()+":"+getRequest().getServerPort()+"/";                logger.debug(serverName);        OfficeConfig of = OfficeConfig.dao.findFirst("select * from eeda_office_config where domain like '"+serverName +"%' or domain like '%"+serverName +"%'");        if(of==null){//没有配置公司的信息会导致页面出错，显示空白页        	of = new OfficeConfig();        	of.set("system_title", "易达物流");        	of.set("logo", "/yh/img/eeda_logo.ico");        }        setAttr("SYS_CONFIG", of);	}    public void logout() {        currentUser.logout();        redirect("/login");    }            @Before(EedaInterceptor.class)    public void m() {        String module_id = getPara(0);        String param1 = getPara(1);                String page = "";        if(param1 == null){                        page = "/eeda/profile/module/searchOrder.html";        }else{            if(StringUtils.isNumeric(param1)){//edit                setAttr("order_id", param1);            }else if("add".equals(param1)){                            }            page = "/eeda/profile/module/editOrder.html";        }                setAttr("module_id", module_id);        render(page);    }        @SuppressWarnings("unchecked")    @Before(Tx.class)    public void m_save() {        String jsonStr=getPara("params");        Gson gson = new Gson();          Map<String, ?> dto= gson.fromJson(jsonStr, HashMap.class);        String orderId = dto.get("id").toString();        String returnString = "";        if(StringUtils.isNotEmpty(orderId)){//update            returnString = EedaCommonHandler.commonUpdate(dto);        }else{//insert            orderId = EedaCommonHandler.commonInsert(dto);        }                //返回order//        String module_id = dto.get("module_id").toString();//        ModuleController mc = new ModuleController();//        Record sRec = mc.getOrderStructureDto(module_id);//        sRec.set("id", orderId);//        Record orderDto =EedaCommonHandler.getOrderDto(sRec.toJson());        Record orderDto = new Record();        orderDto.set("id", orderId);        orderDto.set("return_str", returnString);        renderJson(orderDto);    }        public void m_getOrderData() {        Record orderDto = new Record();        String jsonStr=getPara("params");        orderDto = EedaCommonHandler.getOrderDto(jsonStr);        renderJson(orderDto);    }        public void m_search() {        Enumeration<String>  paraNames= getParaNames();        Map map= EedaCommonHandler.searchOrder(paraNames, getRequest());        renderJson(map);    }}